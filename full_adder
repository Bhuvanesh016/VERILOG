//Verilog code for 

module full_adder
  (
    input a,b,c_in,        //determine the inputs
    output sum,c_out       // determine the outputs
  );
  
  assign sum = a^b&c_in;                 //used directly boolean expression as it is behavioral model
  assign c_out = (a^b&c_in) | (a&b);     
endmodule

//testbench verilog

`timescale 1 ns/10 ps  // time-unit = 1 ns, precision = 10 ps

module full_adder_tb;

    reg a, b, c_in;
    wire sum, c_out;       

    // duration for each bit = 20 * timescale = 20 * 1 ns  = 20ns
    localparam period = 20;  

  full_adder UUT (.a(a), .b(b), .c_in(c_in), .sum(sum), .c_out(c_out)); //intantiating
  
  
    initial // initial block executes only once
        begin
  		
          
          // Dump waves
   			$dumpfile("dump.vcd");
    		$dumpvars(1);
          
            // values for a and b
          	$display("try1.");
            a = 0;
            b = 0;
          	c_in = 0;
            #period; // wait for period 

          	$display("try2.");
          	a = 0;
            b = 0;
          	c_in = 1;
            #period;

          	$display("try3.");
            a = 1;
            b = 0;
          	c_in = 0;
            #period;

          	$display("try4.");
            a = 1;
            b = 1;
          	c_in = 0;
            #period;
        end
  		
  		task display;
          //monitoring
          #4 $display("c_in:%0h, sum:%0h, c_out:%0h",
     	c_in, sum, c_out);
  endtask
  
endmodule
